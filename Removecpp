#include "Remove.h"
#include<iostream>
using namespace std;

Remove::Remove()
{
}

void Remove::removever(int v)
{
	int ad = -1;
	for (int n = 0; n < numv; n++)
	{
		if (nodetable[n].data == v)
		{
			ad = n;
			break;
		}
	}
	if (numv == 1 || ad < 0 || ad >= numv)
	{
		cout << "路由器序号错误，无法删除该路由器" << endl;
		exit(-1);
	}
	edg* p = NULL;
	edg* s = NULL;
	edg* t = NULL;
	int k = 0;
	while (nodetable[ad].head != NULL)
	{ // 删除第v 个边链表中所有结点
		p = nodetable[ad].head;
		k = p->dest; // 取邻接顶点k
		s = nodetable[k].head;
		t = NULL; // 找对称存放的边结点
		while (s != NULL)
		{
			if (s->dest == v)
			{
				t = s;
				break;
			}
			s = s->link;
		}
		if (s != NULL)
		{ // 删除对称存放的边结点
			if (t == NULL)
				nodetable[k].head = s->link;
			else
				t->link = s->link;
			delete s;
		}
		nodetable[ad].head = p->link; // 清除顶点v 的边链表结点
		delete p;
		nume--; // 与顶点v 相关联的边数减一
	}
	numv--;  // 图的顶点个数减1
	nodetable[ad].data = nodetable[numv].data;
	// 填补# 用最后一个顶点来代替
	p = nodetable[ad].head = nodetable[numv].head;
	while (p != NULL)
	{
		s = nodetable[p->dest].head;
		while (s != NULL)
		{
			if (s->dest == numv)
			{
				s->dest = ad; // 修改对应边顶点的下标
				break;
			}
			else
				s = s->link;
		}
		p = p->link;
	}
}

void Remove::removeedg(int v1, int v2)
{
	int ad1 = -1;
	int ad2 = -1;
	for (int i = 0; i < numv; i++)
	{
		if (nodetable[i].data == v1)
		{
			ad1 = i;
			break;
		}
	}
	for (int i = 0; i < numv; i++)
	{
		if (nodetable[i].data == v2)
		{
			ad2 = i;
			break;
		}
	}
	if (ad1 != -1 && ad2 != -1)
	{
		edg* p = nodetable[ad1].head, * q = NULL, * s = p;
		while (p != NULL && p->dest != ad2)     //v1对应边链表中找被删边               
		{
			q = p;
			p = p->link;
		}
		if (p != NULL)
		{          //找到被删边结点                
			if (p == s)
				nodetable[ad1].head = p->link;  //该结点是边链表首结点              
			else
				q->link = p->link;
			delete p;
		}
		else
			cout << "未找到要删除的边" << endl;	//没有找到被删边结点           
		p = nodetable[ad2].head;
		q = NULL;
		s = p;//v2对应边链表中删除         
		while (p->dest != ad1)      //寻找被删边结点              
		{
			q = p;
			p = p->link;
		}
		if (p == s)
			nodetable[ad2].head = p->link;   //该结点是边链表首结点         
		else
			q->link = p->link;
		delete p;
		nume--;
	}
	//没有找到结点 
}

Remove::~Remove()
{
}
